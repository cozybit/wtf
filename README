Introduction
============

wtf is the "Wireless Test Framework".  It is a collection of test suites for
validating various wifi functionality on various wifi devices.  wtf runs on an
Ununtu Linux development machine and makes heavy use of python.

Architecture?  Philosophy?  You decide.
=======================================

Go ahead and open up README.jpg in your favorite JPG viewer.  It's a block
diagram of wtf.  The cursory overview goes like this: You the user instruct the
test driver to run a test, a test suite, or a bunch of test suites.  The test
driver finds the test and runs it.  The test is essentially a sequence of
platform-independent commands that set up the nodes involved in the test, run
the test, gather the results, analyze the results, and finally report whether
the test passed or failed.  The console driver maps platform-independent
commands such as "scan", "associate", and "ping" to platform-specific commands
such as "iw", "ifconfig", etc.  The com driver passes the command to the nodes
via some interface, such as an ssh connection or a serial port.

wtf knows which console driver and com drivers to use because you specify each
node in the configuration file, which is typically called wtf.conf.  The
console driver and com driver are properties of the nodes.  [ more to come ].

wtf is meant to be reusable for different targets.  This is why we bothered to
introduce all of these blocks instead of just having one big block called "test
suite."  Suppose you're developing a system comprised of a debian Linux client
STA with a new mac80211 driver for the Fancypants wifi chip, and the latest
stable hostapd AP running on a stable b43 card on a different debian Linux
machine.  Perhaps you communicate with these debian machines using familiar
bash command line utilities via openssh connections.  You write a test suite
that ensures that the new STA parts successfully communicate with hostapd,
debugging and releasing as you go.

Now suppose that because you did such a fantastic job on the Fancypants driver,
Fancypants' heavyweight customer MegaWorld wants to pay you solid money to make
the driver work on their ancient embedded Linux distribution (AEL).  AEL uses
busybox's sh instead of bash and dropbear ssh instead of openssh.  You want to
reuse the tests that you wrote for the Fancypants project.  You think: "I know!
I'll fork the tests and hack them to work with dropbear and sh."  Wrong answer!
The correct answer is: "In know!  I'll inherit the debian/linux/bash console
driver to create the busybox/sh driver, and override the functions that don't
work.  Next, I'll inherit the ssh com driver and override as necessary to work
with dropbear."  Correct!

Because you chose to re-use your existing tests, the AEL port not only goes
smoothly, it goes quickly.  MegaWorld management is so happy with your work
that they send you for a week-long vacation in Hawaii using only a fraction of
the money that you saved them.  And then they hire you to make ad-hoc mode work
with AEL and the Fancypants wifi chip.  You humbly accept the job, and then
think about how you will test this.  At first you say: "I know!  I'll fork the
tests and hack them so that they test ad-hoc mode."  Wrong answer!  The correct
answer is: "I know!  First I'll add suitable commands to start and stop ad-hoc
mode to the busybox/sh console driver.  Then I'll make an ad-hoc mode test
suite.  Oooh look!  I can factor out this iperf test from the STA-AP tests and
share it with the ad-hoc mode test suite.  Fun!"  Be sure to document the new
platform-independent ad-hoc API that you just introduced.

MegaWorld cannot get enough!  They double your engineering budget and your
co-worker Luisca joins the project.  Luisca has a PhD in bacterial networking,
and you're not quite sure what it is that he is going to be doing.  But he
needs a work environment similar to yours.  And his code is going in the same
repository as yours.  And you want to ensure that he doesn't break your nice,
stable contribution.  So you direct him to two places: the first is this
README, so that he knows how to run the tests.  This diminishes the chance that
he breaks your stuff.  You also direct him to the platform-specific bring-up
instructions in platform/mega-world-ael/README, and to the sample wtf.conf file
in platform/mega-world-ael/wtf.sample.conf.  Luisca is up and running with
minimal help from you because he has everything he needs to duplicate your
work.
