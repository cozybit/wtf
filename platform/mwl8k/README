Introduction
============

The mwl8k is a reference Access Point platform from Marvell.  This document
describes where the source comes from, how to bring the target up, etc.  I do
all of my work from the location of this README.  So any reference to files,
patches, etc. are usually with respect to this directory if not otherwise
mentioned.

Development Machine Setup
=========================

These instructions were developed using Ubuntu 10.04:

1. Get a suitable uclibc toolchain (armv5tel).  I use code sourcery's
   arm-none-eabi-gcc (Sourcery G++ Lite 2009q3-68) 4.4.1.

2. Set up a tftp server somewhere.  I use my own development machine, and the
   tftp root directory happens to be /srv/tftp.  Make sure the permissions are
   sufficiently liberal.

3. Set up an nfs server somewhere.  I use my own development machine for this
   too.  I export my

4. Ensure you have the u-boot utility "mkimage" available in your path
   somewhere.

5. Set up your environment:

   $ export PATH=$PATH:/path/to/CodeSourcery/Sourcery_G++_Lite/bin
   $ export CROSS_COMPILE=arm-uclinuxeabi-
   $ export ARCH=arm
   $ export TFTPROOT=/srv/tftp/
   $ export ROOTDIR=/path/to/your/nfs/roots/rootfs-f12
   [ see "Preparing the rootfs" for more details on this ]
   $ export INSTALL_MOD_PATH=$ROOTDIR

Preparing the rootfs
====================

Fedora provides an arm build.  Handy.

1. Get the prebuilt rootfs:

   $ wget http://ftp.linux.org.uk/pub/linux/arm/fedora/rootfs/rootfs-f12.tar.bz2
   $ tar xjf rootfs-f12.tar.bz2
   $ sudo chmod -R 777 rootfs-f12/

2. Make /etc/inittab drop you to single user mode by default:

   id:1:initdefault:

3. Copy files from the install_root tarball delivered by marvell:

   $ cp -r /path/to/install_root/lib/firmware/mwl8k/ ./rootfs-f12/lib/firmware/

4. Make a default wifi interface come up:

   $ echo "iw phy phy0 interface add wlan0 type __ap" >> ./rootfs-f12/etc/rc.local
   $ ln -s ../rc.local ./rootfs-f12/etc/rc1.d/S50local

5. At this point, you should go build the kernel, install the headers, boot the
   device, and come back here.  See the "Building the Kernel" section below.

6. After you successuflly build the kernel (see below), boot the system and use
   yum to install some packages.  You'll have to connect lan1 or some other
   ethernet port to the Internet for this step.  Note that we can't yum install
   everything because of some broken upstream dependencies.  So we have to
   manually fetch some RPMs.

   $ yum update
   $ yum install iw make ntp libnl-devel keyutils-libs-devel libcom_err-devel \
     libselinux-devel krb5-libs
   $ rpm -Uvh http://ftp.linux.org.uk/pub/linux/arm/fedora/pub/fedora/linux/releases/12/Everything/arm/os/Packages/krb5-devel-1.7-8.fc12.bs.1.armv5tel.rpm
   $ yum install openssl-devel

7. Build hostapd:

   On your dev host:
   $ cd /path/to/rootfs-f12/root
   $ wget http://hostap.epitest.fi/releases/hostapd-0.7.3.tar.gz
   $ tar xzf hostapd-0.7.3.tar.gz
   $ cp ../../hostapd.config ./hostapd-0.7.3/hostapd/.config

   Now build it on the device.  That's right.  Native arm build.
   $ cd /root/hostapd-0.7.3/hostapd
   $ ntpdate ntp.ubuntu.com
   $ make
   $ make install

Building the Kernel
===================

0. Make sure your environment variables are set!

1. Get the source:

   $ git clone git://git.kernel.org/pub/scm/linux/kernel/git/linville/wireless-testing.git
   $ cd wireless-testing

2. Patch the source:

   $ git am ../patches/000*

3. Configure, build, and deploy the kernel:

   $ cp ../config_mwl8k ./.config
   $ make uImage
   $ cp arch/arm/boot/uImage $TFTPROOT
   $ make modules
   $ make modules_install

4. If this is the first time you built the kernel, install the headers
   $ export INSTALL_HDR_PATH=$ROOTDIR
   $ make headers_install

Setup the Target
================

I connect the WAN port of the mwl8k to my dev machine via a crossover cable,
and I get a console on the serial port.  I set up my u-boot environment like
this for network booting (based on Marvell uboot.txt and altered for my env.):

setenv ipaddr 192.168.6.1
setenv serverip 192.168.6.2
setenv x_bootargs console='ttyS0,115200 mtdparts=spi0.0:512k(uboot),512k@512k(psm),3m@1m(kernel),12m@4m(rootfs)'
setenv x_bootcmd 'protect off g0xf8000000 +1; $(x_bootcmd_kernel); setenv bootargs $(x_bootargs) $(x_bootargs_root); bootm 0x6400000'
setenv x_bootcmd_kernel tftp 0x6400000 /srv/tftp/uImage
setenv x_bootargs_root root=/dev/nfs rw nfsroot=192.168.6.2:/path/to/nfs/rootfs_f12 ip=dhcp
setenv bootcmd $(x_bootcmd)
saveenv

TODO: These instructions require a dhcp server up on the dev host.  Surely we
can eliminate that!

If you ever want to change back to booting from flash:

setenv bootcmd 'fsload 0x6400000 uImage;setenv bootargs $(y_bootargs) $(y_bootargs_root) ip=$(ipaddr):$(serverip)$(bootargs_end); bootm 0x6400000;'
saveenv

Other Notes
===========

-- openocd kinda works.  I use the olimex/USB adapter and I pretend the mwl8k
   is a sheeva plug.  This is what my openocd.cfg looks like:

   source [find interface/olimex-arm-usb-ocd.cfg]
   source [find target/feroceon.cfg]
   source [find board/sheevaplug.cfg]

References
==========

[1] Marvell's bring-up guide: 3x3ap_mwl8k_quickstart_guide.doc.  It assumes you
have a Fedora machine.

[2] Many details/files/etc. from this document came from the
mwl8k-quick-start.zip from the Marvell Extranet.
